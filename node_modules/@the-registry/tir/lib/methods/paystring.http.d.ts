import { PaymentInformation } from './paystring.interfaces';
export interface Options {
    chain?: string;
    environment?: string;
    version?: string;
}
/**
 * Find a PayString and return the payment information.
 * @param prefix The part before the "$" for the PayString.
 * @param domain The domain to use for fetching the PayString.
 * @param options Options to search for specific PaymentInformation per network and / or environment.
 *
 * @returns The payment information tied to the PayString or undefined when none is found.
 */
export declare function getPayStringAsync(prefix: string, domain: string, options?: Options): Promise<PaymentInformation | undefined>;
/**
 * Find a PayString and return the payment information with a debounce and callback.
 * @param callback Returns the PaymentInformation when the query is done, or undefined when none is found.
 * @param prefix The part before the "$" for the PayString.
 * @param domain The domain to use for fetching the PayString.
 * @param options Options to search for specific PaymentInformation per network and / or environment.
 * @param debounceTime Time it takes between the last keypress and the actual query call.
 *
 * @returns void, returns data through callback.
 */
export declare function getPayStringDebounce(callback: (data: PaymentInformation | undefined) => void, prefix: string, domain: string, options?: Options, debounceTime?: number): void;
